/*

  total number of paths where at all rows have at least one active logit:

    2^(r*c) - (sum|i=0...r-1|( r_C_i * [2^(c(r-i)) - 1] ) + 1);

*/



derivative of differential logit: ***OBSOLETE - USING EMBEDDED DERIVATIVE INSTEAD***

  y1 = f(x1) + 0
  y2 = f(x2) + f'(x1)
  y3 = f(x3) + f'(x2) + f'(x1)

  Y = y3 + y2 + y1 = [f(x3) + f'(x2) + f'(x1)] + [f(x2) + f'(x1)] + f(x1)
  

  dY/dx3 = dy1/x3 + dy2/x3 + dy1/x3 = [f'(x3) + 0 + 0] + [0 + 0] + 0

  dY/dx2 = dy1/x2 + dy2/x2 + dy1/x2 = [0 + f''(x2) + 0] + [f'(x2) + 0] + 0
                                            becomes: f''(x2) + f'(x2)

  dY/dx3 = dy1/x1 + dy2/x1 + dy1/x1 = [0 + 0 + f''(x1)] + [0 + f''(x1)] + f'(x1)
                                          becomes: f''(x1) + f''(x1) + f'(x1)

  therefore: dY/dx_i = sum[i = 1 <= N]( (N - i) * f''(x_i) + f'(x_i) )


/*

struct running_deriv {

  float theta{0.5f}, y{0.0f}, mem{0.0f}, d_theta{0.0f}, m_theta{0.0f};

  float f ( const float& t, const float& x ){ return t * std::pow(x, 2); }
  float fp( const float& t, const float& x ){ return 2.0f * t * x; }

  float forward( const float& x) {

    float tmp = f(theta, x + mem);

    d_theta += (f(theta + 1e-4f, x + m_theta) - tmp) / 1e-4f;

    mem = fp(theta, x + mem);
    
    m_theta = fp(theta + 1e-4f, x + m_theta);

    return (y += tmp);

  }

  void reset(){ theta = 0.5; y = 0.0f; mem = 0.0f; d_theta = 0.0f; }


};

*/